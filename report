{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Case study: Analysing user conversion for a bike-share company ##\n",
    "\n",
    "Google Data Analytics Certificate Program Capstone Project\n",
    "\n",
    "Jun Bae\n",
    "\n",
    "October 21st, 2022"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Introduction ###"
   ]
  },
  {
   "attachments": {
    "Screen%20Shot%202022-10-03%20at%2011.34.25%20AM.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Screen%20Shot%202022-10-03%20at%2011.34.25%20AM.png](attachment:Screen%20Shot%202022-10-03%20at%2011.34.25%20AM.png)\n",
    "\n",
    "Cyclistic is a fictional bike-share company based in Chicago, Illinois. Since launching in 2016, the company has grown to offer around 6,000 bikes moving from one of some 700 stations across the city to another, providing an eco-friendly, healthy, and economic means of transportation to all.\n",
    "\n",
    "After years of appealing to various customer segments with its flexible pricing plans - single-ride pass, full-day pass, and annual membership - the company now believes the best way forward is to maximise the number of annual subscribers, or Cyclistic members as they're called.\n",
    "\n",
    "Hence the marketing team is currently working on developing a campaign aimed at converting casual riders to Cyclistic members. Lily Moreno, the head of marketing, has asked you, a junior data analyst working for the company, the first of the following three salient questions they are trying to tackle:\n",
    "\n",
    "1. How do annual members and casual riders use Cyclistic bikes differently?\n",
    "2. Why would casual riders buy Cyclistic annual memberships?\n",
    "3. How can Cyclistic use digital media to influence casual riders to become members?\n",
    "\n",
    "Your job is to come up with a report with the following deliverables within a week:\n",
    "\n",
    "1. A clear statement of the business task\n",
    "2. A description of all data sources used\n",
    "3. Documentation of any cleaning or manipulation of data\n",
    "4. A summary of your analysis\n",
    "5. Supporting visualizations and key findings\n",
    "6. Your top recommendations based on your analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 1: Ask ###"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Guiding questions:\n",
    "\n",
    "● What is the problem you are trying to solve?\n",
    "\n",
    "● How can your insights drive business decisions?\n",
    "\n",
    "Key tasks:\n",
    "\n",
    "● Consider key stakeholders\n",
    "\n",
    "● Clearly state the business task and why this analysis matters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Objective of this report: Identify the most important behavioural differences between casual riders and annual riders, bearing in mind the ultimate goal of user conversion.**\n",
    "\n",
    "Why it matters: The key insights from this report will be pivotal to putting a successful marketing campaign to convert users, because doing so requires knowing who to target, what offer and message to include, and how to convey them. It could also point out any potential issues preventing the company from enjoying further user conversion."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 2: Prepare ###"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Guiding questions:\n",
    "\n",
    "● Where is your data located?\n",
    "\n",
    "● How is the data organized?\n",
    "\n",
    "● Are there issues with bias or credibility in this data? Does your data ROCCC?\n",
    "\n",
    "● How are you addressing licensing, privacy, security, and accessibility?\n",
    "\n",
    "● How did you verify the data’s integrity?\n",
    "\n",
    "● How does it help you answer your question?\n",
    "\n",
    "● Are there any problems with the data?\n",
    "\n",
    "Key tasks:\n",
    "\n",
    "● Download the data and store it appropriately\n",
    "\n",
    "● Identify how it's organised\n",
    "\n",
    "● Sort and filter the data\n",
    "\n",
    "● Determine the credibility of data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The company has data of historical trips, which can be found here: https://divvy-tripdata.s3.amazonaws.com/index.html. Moreno has asked to analyse the past 12 months' data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# configuration for displaying multiple outputs a cell\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing the datasets\n",
    "import pandas as pd\n",
    "M1 = pd.read_csv(\"/Users/Jun/Downloads/202109-divvy-tripdata.csv\")\n",
    "M2 = pd.read_csv(\"/Users/Jun/Downloads/202110-divvy-tripdata.csv\")\n",
    "M3 = pd.read_csv(\"/Users/Jun/Downloads/202111-divvy-tripdata.csv\")\n",
    "M4 = pd.read_csv(\"/Users/Jun/Downloads/202112-divvy-tripdata.csv\")\n",
    "M5 = pd.read_csv(\"/Users/Jun/Downloads/202201-divvy-tripdata.csv\")\n",
    "M6 = pd.read_csv(\"/Users/Jun/Downloads/202202-divvy-tripdata.csv\")\n",
    "M7 = pd.read_csv(\"/Users/Jun/Downloads/202203-divvy-tripdata.csv\")\n",
    "M8 = pd.read_csv(\"/Users/Jun/Downloads/202204-divvy-tripdata.csv\")\n",
    "M9 = pd.read_csv(\"/Users/Jun/Downloads/202205-divvy-tripdata.csv\")\n",
    "M10 = pd.read_csv(\"/Users/Jun/Downloads/202206-divvy-tripdata.csv\")\n",
    "M11 = pd.read_csv(\"/Users/Jun/Downloads/202207-divvy-tripdata.csv\")\n",
    "M12 = pd.read_csv(\"/Users/Jun/Downloads/202208-divvy-tripdata.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each dataset above corresponds to one of the months from the period Sept. 2021 to Aug. 2022 and is stored as a dataframe object. Below a sample of the first month's data is shown:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9DC7B962304CBFD8</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 16:07:10</td>\n",
       "      <td>2021-09-28 16:09:54</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.89</td>\n",
       "      <td>-87.68</td>\n",
       "      <td>41.89</td>\n",
       "      <td>-87.67</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F930E2C6872D6B32</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 14:24:51</td>\n",
       "      <td>2021-09-28 14:40:05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.94</td>\n",
       "      <td>-87.64</td>\n",
       "      <td>41.98</td>\n",
       "      <td>-87.67</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6EF72137900BB910</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 00:20:16</td>\n",
       "      <td>2021-09-28 00:23:57</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.81</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>41.80</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>78D1DE133B3DBF55</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 14:51:17</td>\n",
       "      <td>2021-09-28 15:00:06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.80</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>41.81</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>E03D4ACDCAEF6E00</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 09:53:12</td>\n",
       "      <td>2021-09-28 10:03:44</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.74</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.71</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>346DE323A2677DC0</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 01:53:18</td>\n",
       "      <td>2021-09-28 02:00:02</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.87</td>\n",
       "      <td>-87.75</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.74</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>558CE7087B42D8DB</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 07:15:56</td>\n",
       "      <td>2021-09-28 07:38:25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.74</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>41.74</td>\n",
       "      <td>-87.56</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3EF7CB1851930A1F</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 11:17:00</td>\n",
       "      <td>2021-09-28 11:40:17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.74</td>\n",
       "      <td>-87.56</td>\n",
       "      <td>41.75</td>\n",
       "      <td>-87.63</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1F9A9A6BA4C2F82E</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-27 19:57:09</td>\n",
       "      <td>2021-09-27 20:09:08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.95</td>\n",
       "      <td>-87.76</td>\n",
       "      <td>41.95</td>\n",
       "      <td>-87.76</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CAA3791DE7300B8E</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 11:01:26</td>\n",
       "      <td>2021-09-28 11:22:56</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.93</td>\n",
       "      <td>-87.69</td>\n",
       "      <td>41.95</td>\n",
       "      <td>-87.75</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            ride_id  rideable_type           started_at             ended_at  \\\n",
       "0  9DC7B962304CBFD8  electric_bike  2021-09-28 16:07:10  2021-09-28 16:09:54   \n",
       "1  F930E2C6872D6B32  electric_bike  2021-09-28 14:24:51  2021-09-28 14:40:05   \n",
       "2  6EF72137900BB910  electric_bike  2021-09-28 00:20:16  2021-09-28 00:23:57   \n",
       "3  78D1DE133B3DBF55  electric_bike  2021-09-28 14:51:17  2021-09-28 15:00:06   \n",
       "4  E03D4ACDCAEF6E00  electric_bike  2021-09-28 09:53:12  2021-09-28 10:03:44   \n",
       "5  346DE323A2677DC0  electric_bike  2021-09-28 01:53:18  2021-09-28 02:00:02   \n",
       "6  558CE7087B42D8DB  electric_bike  2021-09-28 07:15:56  2021-09-28 07:38:25   \n",
       "7  3EF7CB1851930A1F  electric_bike  2021-09-28 11:17:00  2021-09-28 11:40:17   \n",
       "8  1F9A9A6BA4C2F82E  electric_bike  2021-09-27 19:57:09  2021-09-27 20:09:08   \n",
       "9  CAA3791DE7300B8E  electric_bike  2021-09-28 11:01:26  2021-09-28 11:22:56   \n",
       "\n",
       "  start_station_name start_station_id end_station_name end_station_id  \\\n",
       "0                NaN              NaN              NaN            NaN   \n",
       "1                NaN              NaN              NaN            NaN   \n",
       "2                NaN              NaN              NaN            NaN   \n",
       "3                NaN              NaN              NaN            NaN   \n",
       "4                NaN              NaN              NaN            NaN   \n",
       "5                NaN              NaN              NaN            NaN   \n",
       "6                NaN              NaN              NaN            NaN   \n",
       "7                NaN              NaN              NaN            NaN   \n",
       "8                NaN              NaN              NaN            NaN   \n",
       "9                NaN              NaN              NaN            NaN   \n",
       "\n",
       "   start_lat  start_lng  end_lat  end_lng member_casual  \n",
       "0      41.89     -87.68    41.89   -87.67        casual  \n",
       "1      41.94     -87.64    41.98   -87.67        casual  \n",
       "2      41.81     -87.72    41.80   -87.72        casual  \n",
       "3      41.80     -87.72    41.81   -87.72        casual  \n",
       "4      41.88     -87.74    41.88   -87.71        casual  \n",
       "5      41.87     -87.75    41.88   -87.74        casual  \n",
       "6      41.74     -87.63    41.74   -87.56        casual  \n",
       "7      41.74     -87.56    41.75   -87.63        casual  \n",
       "8      41.95     -87.76    41.95   -87.76        casual  \n",
       "9      41.93     -87.69    41.95   -87.75        casual  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "M1.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From above it is clear that each row refers to a single trip that happened in September 2021, though the rows aren't ordered chronologically.\n",
    "\n",
    "An important question to ask before proceding is whether the datasets are credible. While there is no need to verify every single row (though even if there was it would be impossible) it definitely pays to do some sanity checks.\n",
    "\n",
    "Once the datasets are gathered together, three things can be checked practically and meaningfully: 1) whether all trips fall within the period of September 2021 to August 2022 2) if any trip length is unreasonable 3) if any location coordinate looks suspicious."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9DC7B962304CBFD8</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 16:07:10</td>\n",
       "      <td>2021-09-28 16:09:54</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.89</td>\n",
       "      <td>-87.68</td>\n",
       "      <td>41.89</td>\n",
       "      <td>-87.67</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F930E2C6872D6B32</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 14:24:51</td>\n",
       "      <td>2021-09-28 14:40:05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.94</td>\n",
       "      <td>-87.64</td>\n",
       "      <td>41.98</td>\n",
       "      <td>-87.67</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6EF72137900BB910</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 00:20:16</td>\n",
       "      <td>2021-09-28 00:23:57</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.81</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>41.80</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>78D1DE133B3DBF55</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 14:51:17</td>\n",
       "      <td>2021-09-28 15:00:06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.80</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>41.81</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>E03D4ACDCAEF6E00</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 09:53:12</td>\n",
       "      <td>2021-09-28 10:03:44</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.74</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.71</td>\n",
       "      <td>casual</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            ride_id  rideable_type           started_at             ended_at  \\\n",
       "0  9DC7B962304CBFD8  electric_bike  2021-09-28 16:07:10  2021-09-28 16:09:54   \n",
       "1  F930E2C6872D6B32  electric_bike  2021-09-28 14:24:51  2021-09-28 14:40:05   \n",
       "2  6EF72137900BB910  electric_bike  2021-09-28 00:20:16  2021-09-28 00:23:57   \n",
       "3  78D1DE133B3DBF55  electric_bike  2021-09-28 14:51:17  2021-09-28 15:00:06   \n",
       "4  E03D4ACDCAEF6E00  electric_bike  2021-09-28 09:53:12  2021-09-28 10:03:44   \n",
       "\n",
       "  start_station_name start_station_id end_station_name end_station_id  \\\n",
       "0                NaN              NaN              NaN            NaN   \n",
       "1                NaN              NaN              NaN            NaN   \n",
       "2                NaN              NaN              NaN            NaN   \n",
       "3                NaN              NaN              NaN            NaN   \n",
       "4                NaN              NaN              NaN            NaN   \n",
       "\n",
       "   start_lat  start_lng  end_lat  end_lng member_casual  \n",
       "0      41.89     -87.68    41.89   -87.67        casual  \n",
       "1      41.94     -87.64    41.98   -87.67        casual  \n",
       "2      41.81     -87.72    41.80   -87.72        casual  \n",
       "3      41.80     -87.72    41.81   -87.72        casual  \n",
       "4      41.88     -87.74    41.88   -87.71        casual  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# all twelve datasets merged together\n",
    "All = pd.concat([M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12], ignore_index = True)\n",
    "All.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<PeriodArray>\n",
       "['2021-09', '2021-10', '2021-11', '2021-12', '2022-01', '2022-02', '2022-03',\n",
       " '2022-04', '2022-05', '2022-06', '2022-07', '2022-08']\n",
       "Length: 12, dtype: period[M]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sanity check 1\n",
    "All[\"started_at\"] = pd.to_datetime(All[\"started_at\"], format = '%Y-%m-%d %H:%M:%S')\n",
    "All[\"started_at\"].dt.to_period('M').unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above suggests all trips began at some point within the desired period."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count                   5883043\n",
       "mean     0 days 00:19:45.209962\n",
       "std      0 days 02:40:28.996522\n",
       "min           -1 days +21:42:35\n",
       "25%             0 days 00:06:03\n",
       "50%             0 days 00:10:43\n",
       "75%             0 days 00:19:20\n",
       "max            28 days 06:25:01\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sanity check 2\n",
    "All[\"ended_at\"] = pd.to_datetime(All[\"ended_at\"], format = '%Y-%m-%d %H:%M:%S')\n",
    "(All[\"ended_at\"] - All[\"started_at\"]).describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Something is clearly at fault here - trip length cannot be negative nor zero. In the real world the best course of action would be to further invetigate into what happened, but let the problematic trips just be deleted here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# deleting problematic trips\n",
    "All = All[All[\"ended_at\"] > All[\"started_at\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.882437e+06</td>\n",
       "      <td>5.882437e+06</td>\n",
       "      <td>5.876710e+06</td>\n",
       "      <td>5.876710e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.190104e+01</td>\n",
       "      <td>-8.764766e+01</td>\n",
       "      <td>4.190129e+01</td>\n",
       "      <td>-8.764786e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4.719744e-02</td>\n",
       "      <td>3.097205e-02</td>\n",
       "      <td>4.729927e-02</td>\n",
       "      <td>3.059219e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.164000e+01</td>\n",
       "      <td>-8.784000e+01</td>\n",
       "      <td>4.139000e+01</td>\n",
       "      <td>-8.897000e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>4.188103e+01</td>\n",
       "      <td>-8.766201e+01</td>\n",
       "      <td>4.188103e+01</td>\n",
       "      <td>-8.766356e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>4.189993e+01</td>\n",
       "      <td>-8.764377e+01</td>\n",
       "      <td>4.190000e+01</td>\n",
       "      <td>-8.764410e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>4.193000e+01</td>\n",
       "      <td>-8.762930e+01</td>\n",
       "      <td>4.193000e+01</td>\n",
       "      <td>-8.762932e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.563503e+01</td>\n",
       "      <td>-7.379648e+01</td>\n",
       "      <td>4.237000e+01</td>\n",
       "      <td>-8.750000e+01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          start_lat     start_lng       end_lat       end_lng\n",
       "count  5.882437e+06  5.882437e+06  5.876710e+06  5.876710e+06\n",
       "mean   4.190104e+01 -8.764766e+01  4.190129e+01 -8.764786e+01\n",
       "std    4.719744e-02  3.097205e-02  4.729927e-02  3.059219e-02\n",
       "min    4.164000e+01 -8.784000e+01  4.139000e+01 -8.897000e+01\n",
       "25%    4.188103e+01 -8.766201e+01  4.188103e+01 -8.766356e+01\n",
       "50%    4.189993e+01 -8.764377e+01  4.190000e+01 -8.764410e+01\n",
       "75%    4.193000e+01 -8.762930e+01  4.193000e+01 -8.762932e+01\n",
       "max    4.563503e+01 -7.379648e+01  4.237000e+01 -8.750000e+01"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sanity check 3\n",
    "All.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looks like some trips took place somewhere far off Chicago, though likely still within Illinois. Upon confirming that not all stations are located within Chicago, it's good to go. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x17427f748>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# checking for missing values\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.heatmap(All.isnull(), cbar = False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above heatmap says no values are missing except for the columns for stations, which aren't very relevant or useful to this analysis.\n",
    "\n",
    "With these and the fact that all data are fictional, it's safe to say that there's no problem in terms of data integrity, credibility, and privacy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 3: Process ###"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Guiding questions:\n",
    "\n",
    "● What tools are you choosing and why?\n",
    "\n",
    "● Have you ensured your data’s integrity?\n",
    "\n",
    "● What steps have you taken to ensure that your data is clean?\n",
    "\n",
    "● How can you verify that your data is clean and ready to analyze?\n",
    "\n",
    "● Have you documented your cleaning process so you can review and share those results?\n",
    "\n",
    "Key tasks:\n",
    "\n",
    "● Check the data for errors\n",
    "\n",
    "● Choose your tools\n",
    "\n",
    "● Transform the data so you can work with it effectively\n",
    "\n",
    "● Document the cleaning process"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the dataset is legitimate, it is worth cleaning before analysis. One way to begin is to examine the consistency of data values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['electric_bike', 'classic_bike', 'docked_bike'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "array(['casual', 'member'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# displaying all unique values for each column\n",
    "All[\"rideable_type\"].unique()\n",
    "All[\"member_casual\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above confirms that all columns are readily usable. Below a new column trip_length is created for convenience:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "      <th>trip_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9DC7B962304CBFD8</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 16:07:10</td>\n",
       "      <td>2021-09-28 16:09:54</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.89</td>\n",
       "      <td>-87.68</td>\n",
       "      <td>41.89</td>\n",
       "      <td>-87.67</td>\n",
       "      <td>casual</td>\n",
       "      <td>00:02:44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F930E2C6872D6B32</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 14:24:51</td>\n",
       "      <td>2021-09-28 14:40:05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.94</td>\n",
       "      <td>-87.64</td>\n",
       "      <td>41.98</td>\n",
       "      <td>-87.67</td>\n",
       "      <td>casual</td>\n",
       "      <td>00:15:14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6EF72137900BB910</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 00:20:16</td>\n",
       "      <td>2021-09-28 00:23:57</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.81</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>41.80</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>casual</td>\n",
       "      <td>00:03:41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>78D1DE133B3DBF55</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 14:51:17</td>\n",
       "      <td>2021-09-28 15:00:06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.80</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>41.81</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>casual</td>\n",
       "      <td>00:08:49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>E03D4ACDCAEF6E00</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 09:53:12</td>\n",
       "      <td>2021-09-28 10:03:44</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.74</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.71</td>\n",
       "      <td>casual</td>\n",
       "      <td>00:10:32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            ride_id  rideable_type          started_at            ended_at  \\\n",
       "0  9DC7B962304CBFD8  electric_bike 2021-09-28 16:07:10 2021-09-28 16:09:54   \n",
       "1  F930E2C6872D6B32  electric_bike 2021-09-28 14:24:51 2021-09-28 14:40:05   \n",
       "2  6EF72137900BB910  electric_bike 2021-09-28 00:20:16 2021-09-28 00:23:57   \n",
       "3  78D1DE133B3DBF55  electric_bike 2021-09-28 14:51:17 2021-09-28 15:00:06   \n",
       "4  E03D4ACDCAEF6E00  electric_bike 2021-09-28 09:53:12 2021-09-28 10:03:44   \n",
       "\n",
       "  start_station_name start_station_id end_station_name end_station_id  \\\n",
       "0                NaN              NaN              NaN            NaN   \n",
       "1                NaN              NaN              NaN            NaN   \n",
       "2                NaN              NaN              NaN            NaN   \n",
       "3                NaN              NaN              NaN            NaN   \n",
       "4                NaN              NaN              NaN            NaN   \n",
       "\n",
       "   start_lat  start_lng  end_lat  end_lng member_casual trip_length  \n",
       "0      41.89     -87.68    41.89   -87.67        casual    00:02:44  \n",
       "1      41.94     -87.64    41.98   -87.67        casual    00:15:14  \n",
       "2      41.81     -87.72    41.80   -87.72        casual    00:03:41  \n",
       "3      41.80     -87.72    41.81   -87.72        casual    00:08:49  \n",
       "4      41.88     -87.74    41.88   -87.71        casual    00:10:32  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "All[\"trip_length\"] = All[\"ended_at\"] - All[\"started_at\"]\n",
    "All.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An attribute indicating the day of the week in which a trip started would also be helpful."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ride_id</th>\n",
       "      <th>rideable_type</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>start_lat</th>\n",
       "      <th>start_lng</th>\n",
       "      <th>end_lat</th>\n",
       "      <th>end_lng</th>\n",
       "      <th>member_casual</th>\n",
       "      <th>trip_length</th>\n",
       "      <th>weekday</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9DC7B962304CBFD8</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 16:07:10</td>\n",
       "      <td>2021-09-28 16:09:54</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.89</td>\n",
       "      <td>-87.68</td>\n",
       "      <td>41.89</td>\n",
       "      <td>-87.67</td>\n",
       "      <td>casual</td>\n",
       "      <td>00:02:44</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F930E2C6872D6B32</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 14:24:51</td>\n",
       "      <td>2021-09-28 14:40:05</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.94</td>\n",
       "      <td>-87.64</td>\n",
       "      <td>41.98</td>\n",
       "      <td>-87.67</td>\n",
       "      <td>casual</td>\n",
       "      <td>00:15:14</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6EF72137900BB910</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 00:20:16</td>\n",
       "      <td>2021-09-28 00:23:57</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.81</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>41.80</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>casual</td>\n",
       "      <td>00:03:41</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>78D1DE133B3DBF55</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 14:51:17</td>\n",
       "      <td>2021-09-28 15:00:06</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.80</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>41.81</td>\n",
       "      <td>-87.72</td>\n",
       "      <td>casual</td>\n",
       "      <td>00:08:49</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>E03D4ACDCAEF6E00</td>\n",
       "      <td>electric_bike</td>\n",
       "      <td>2021-09-28 09:53:12</td>\n",
       "      <td>2021-09-28 10:03:44</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.74</td>\n",
       "      <td>41.88</td>\n",
       "      <td>-87.71</td>\n",
       "      <td>casual</td>\n",
       "      <td>00:10:32</td>\n",
       "      <td>Tuesday</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            ride_id  rideable_type          started_at            ended_at  \\\n",
       "0  9DC7B962304CBFD8  electric_bike 2021-09-28 16:07:10 2021-09-28 16:09:54   \n",
       "1  F930E2C6872D6B32  electric_bike 2021-09-28 14:24:51 2021-09-28 14:40:05   \n",
       "2  6EF72137900BB910  electric_bike 2021-09-28 00:20:16 2021-09-28 00:23:57   \n",
       "3  78D1DE133B3DBF55  electric_bike 2021-09-28 14:51:17 2021-09-28 15:00:06   \n",
       "4  E03D4ACDCAEF6E00  electric_bike 2021-09-28 09:53:12 2021-09-28 10:03:44   \n",
       "\n",
       "  start_station_name start_station_id end_station_name end_station_id  \\\n",
       "0                NaN              NaN              NaN            NaN   \n",
       "1                NaN              NaN              NaN            NaN   \n",
       "2                NaN              NaN              NaN            NaN   \n",
       "3                NaN              NaN              NaN            NaN   \n",
       "4                NaN              NaN              NaN            NaN   \n",
       "\n",
       "   start_lat  start_lng  end_lat  end_lng member_casual trip_length  weekday  \n",
       "0      41.89     -87.68    41.89   -87.67        casual    00:02:44  Tuesday  \n",
       "1      41.94     -87.64    41.98   -87.67        casual    00:15:14  Tuesday  \n",
       "2      41.81     -87.72    41.80   -87.72        casual    00:03:41  Tuesday  \n",
       "3      41.80     -87.72    41.81   -87.72        casual    00:08:49  Tuesday  \n",
       "4      41.88     -87.74    41.88   -87.71        casual    00:10:32  Tuesday  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "array(['Tuesday', 'Monday', 'Wednesday', 'Saturday', 'Friday', 'Thursday',\n",
       "       'Sunday'], dtype=object)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "All[\"weekday\"] = All[\"started_at\"].dt.weekday_name\n",
    "All.head(5)\n",
    "All[\"weekday\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this data processing is finished and the dataset is ready for analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 4: Analyse ###"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Guiding questions:\n",
    "\n",
    "● How should you organize your data to perform analysis on it?\n",
    "\n",
    "● Has your data been properly formatted?\n",
    "\n",
    "● What surprises did you discover in the data?\n",
    "\n",
    "● What trends or relationships did you find in the data?\n",
    "\n",
    "● How will these insights help answer your business questions?\n",
    "\n",
    "Key tasks:\n",
    "\n",
    "● Aggregate your data so it’s useful and accessible\n",
    "\n",
    "● Organize and format your data\n",
    "\n",
    "● Perform calculations\n",
    "\n",
    "● Identify trends and relationships"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a reminder, the question is as follows: how do Cyclistic members and casual riders use the company's services differently?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**The Hypothesis**\n",
    "\n",
    "Annual members are subscribers because they are interested in regularly cycling, most likely for commuting and exercising. Therefore their ride times should be focused more on mornings and evenings, at least more so than casual riders, who most likely use Cyclistic for one-time leisure or convenience purposes. Casual rides, then, should be more often during weekends than weekdays, since leisurly trips are more likely to happen when people have extra time in their hands."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1. Average ride length comparison**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "member_casual\n",
       "casual   00:29:18.072523\n",
       "member   00:12:51.358566\n",
       "Name: trip_length, dtype: timedelta64[ns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finding_one = All.groupby(\"member_casual\")[\"trip_length\"].sum()/All.groupby(\"member_casual\")[\"trip_length\"].count()\n",
    "finding_one"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Interestingly, casual riders on average ride more than twice as long as member riders do, with each ride expected to last around 29 minutes, which is 16 minutes more than the member average - a statistically significant result. This probably hints that casual rides tend to last longer, and if that is the case, it's not difficult to deduce why: since many casual riders are one-time riders, they are encouraged to make more out of each ride than annual members do.\n",
    "\n",
    "In relation to the aforementioned hypothesis, this really doesn't say much; more analysis is required."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2. Difference in distribution of ride times throughout the day**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "member_casual  start_hour\n",
       "casual         0             0.020169\n",
       "               1             0.013272\n",
       "               2             0.008413\n",
       "               3             0.004910\n",
       "               4             0.003537\n",
       "               5             0.005355\n",
       "               6             0.011848\n",
       "               7             0.021460\n",
       "               8             0.028679\n",
       "               9             0.031467\n",
       "               10            0.041357\n",
       "               11            0.053431\n",
       "               12            0.062610\n",
       "               13            0.065660\n",
       "               14            0.068832\n",
       "               15            0.075681\n",
       "               16            0.083291\n",
       "               17            0.093815\n",
       "               18            0.084985\n",
       "               19            0.065545\n",
       "               20            0.048263\n",
       "               21            0.041345\n",
       "               22            0.037850\n",
       "               23            0.028226\n",
       "member         0             0.010692\n",
       "               1             0.006642\n",
       "               2             0.003778\n",
       "               3             0.002311\n",
       "               4             0.002664\n",
       "               5             0.009936\n",
       "               6             0.026998\n",
       "               7             0.051303\n",
       "               8             0.060289\n",
       "               9             0.043463\n",
       "               10            0.041439\n",
       "               11            0.049547\n",
       "               12            0.056943\n",
       "               13            0.056041\n",
       "               14            0.055401\n",
       "               15            0.065400\n",
       "               16            0.086060\n",
       "               17            0.103990\n",
       "               18            0.085734\n",
       "               19            0.061647\n",
       "               20            0.043327\n",
       "               21            0.033590\n",
       "               22            0.025723\n",
       "               23            0.017082\n",
       "Name: ride_id, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "All[\"start_hour\"] = All[\"started_at\"].dt.hour\n",
    "finding_two = All.groupby([\"member_casual\",\"start_hour\"])[\"ride_id\"].count()/All.groupby(\"member_casual\")[\"ride_id\"].count()\n",
    "finding_two"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above pivot table shows how the distribution of ride times of the day differ between causal riders and member riders. As suspected morning rides are more frequent for the member cohort,\n",
    "and the difference is especially evident at 7 AM and 8 AM. Casual rides also seem to be a bit more frequent during non-rush-hour daytimes compared to member rides, which also is expected."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3. Popular days of the week**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "member_casual  weekday  \n",
       "casual         Friday       0.140180\n",
       "               Monday       0.118370\n",
       "               Saturday     0.206629\n",
       "               Sunday       0.177204\n",
       "               Thursday     0.126190\n",
       "               Tuesday      0.112626\n",
       "               Wednesday    0.118801\n",
       "member         Friday       0.138287\n",
       "               Monday       0.139060\n",
       "               Saturday     0.132967\n",
       "               Sunday       0.118464\n",
       "               Thursday     0.153898\n",
       "               Tuesday      0.157121\n",
       "               Wednesday    0.160203\n",
       "Name: ride_id, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finding_three = All.groupby([\"member_casual\",\"weekday\"])[\"ride_id\"].count()/All.groupby([\"member_casual\"])[\"ride_id\"].count()\n",
    "finding_three"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Weekend rides make up around 40 percent of all casual rides. Weekday rides account for three quarters of all member rides. This finding too aligns nicely with the hypothesis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4. Average Ride Length Across The Week**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "member_casual  weekday  \n",
       "casual         Friday      00:27:53.518861\n",
       "               Monday      00:29:50.722222\n",
       "               Saturday    00:32:02.618228\n",
       "               Sunday      00:34:11.404179\n",
       "               Thursday    00:26:01.735976\n",
       "               Tuesday     00:25:55.067562\n",
       "               Wednesday   00:25:02.584879\n",
       "member         Friday      00:12:35.722793\n",
       "               Monday      00:12:27.054531\n",
       "               Saturday    00:14:18.159593\n",
       "               Sunday      00:14:25.520163\n",
       "               Thursday    00:12:22.521129\n",
       "               Tuesday     00:12:10.728589\n",
       "               Wednesday   00:12:11.830212\n",
       "dtype: timedelta64[ns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finding_four = All.groupby([\"member_casual\",\"weekday\"])[\"trip_length\"].agg('sum')/All.groupby([\"member_casual\",\"weekday\"])[\"ride_id\"].agg('count')\n",
    "finding_four"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The tendency to ride longer during weekends is evident in both sides. It's worth mentioning that the variation for the member group is noticeably less than that of the casual group. In fact, disregarding weekends, the difference is only as great as 30 seconds  for the former, while it's almost 5 minutes for the latter. This is suggestive of a somewhat regular nature of the member rides - an observation in favour of the initial hypothesis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**5. Preferred Ride Types**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "member_casual  rideable_type\n",
       "casual         classic_bike     0.417906\n",
       "               docked_bike      0.084263\n",
       "               electric_bike    0.497831\n",
       "member         classic_bike     0.546239\n",
       "               electric_bike    0.453761\n",
       "Name: ride_id, dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "finding_five = All.groupby([\"member_casual\",\"rideable_type\"])[\"ride_id\"].count()/All.groupby(\"member_casual\")[\"ride_id\"].count()\n",
    "finding_five"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "No annual member has had a trip with a docked bike, according to the table. Unless there has been a data recording error such as \"docked_bike\" being supposed to be either \"classic_bike\" or \"electric_bike\", this seems like one of intended differences by the company, for it's extremely unlikely that not one member ride did not involve a docked bike out of sheer coincidence.\n",
    "\n",
    "For what it's worth, electric bikes are the more preferred option among the causal camp, contrary to the member camp, where classic bikes are clearly the more favoured option.\n",
    "\n",
    "One possible explanation is that, since casual riders are more likely to be people in need of one-time conveniences or leisurly trips than member riders are, electric bikes are the more popular option because they are rarer, more expensive, and more convenient."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 5: Share ###"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Guiding questions:\n",
    "\n",
    "● Were you able to answer the question of how annual members and casual riders use Cyclistic bikes differently?\n",
    "\n",
    "● What story does your data tell?\n",
    "\n",
    "● How do your findings relate to your original question?\n",
    "\n",
    "● Who is your audience? What is the best way to communicate with them?\n",
    "\n",
    "● Can data visualization help you share your findings?\n",
    "\n",
    "● Is your presentation accessible to your audience?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the summary of the findings, with visualisations created using Google Sheets:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: FutureWarning: The signature of `Series.to_csv` was aligned to that of `DataFrame.to_csv`, and argument 'header' will change its default value from False to True: please pass an explicit value to suppress this warning.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: FutureWarning: The signature of `Series.to_csv` was aligned to that of `DataFrame.to_csv`, and argument 'header' will change its default value from False to True: please pass an explicit value to suppress this warning.\n",
      "  \n",
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: FutureWarning: The signature of `Series.to_csv` was aligned to that of `DataFrame.to_csv`, and argument 'header' will change its default value from False to True: please pass an explicit value to suppress this warning.\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:4: FutureWarning: The signature of `Series.to_csv` was aligned to that of `DataFrame.to_csv`, and argument 'header' will change its default value from False to True: please pass an explicit value to suppress this warning.\n",
      "  after removing the cwd from sys.path.\n",
      "//anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:5: FutureWarning: The signature of `Series.to_csv` was aligned to that of `DataFrame.to_csv`, and argument 'header' will change its default value from False to True: please pass an explicit value to suppress this warning.\n",
      "  \"\"\"\n"
     ]
    }
   ],
   "source": [
    "# exporting the findings so that they can be read in Google Sheets\n",
    "finding_one.to_csv(\"/Users/Jun/Desktop/finding_one.csv\")\n",
    "finding_two.to_csv(\"/Users/Jun/Desktop/finding_two.csv\")\n",
    "finding_three.to_csv(\"/Users/Jun/Desktop/finding_three.csv\")\n",
    "finding_four.to_csv(\"/Users/Jun/Desktop/finding_four.csv\")\n",
    "finding_five.to_csv(\"/Users/Jun/Desktop/finding_five.csv\")"
   ]
  },
  {
   "attachments": {
    "Average%20Casual%20Ride%20Length-2.png": {
     "image/png": "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"
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An average casual ride lasts more than twice the length of an average member ride.\n",
    "\n",
    "![Average%20Casual%20Ride%20Length-2.png](attachment:Average%20Casual%20Ride%20Length-2.png)"
   ]
  },
  {
   "attachments": {
    "Distribution%20Of%20Ride%20Start%20Times.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Member rides tend to be more focused on morning and evening commute times than casual rides are.\n",
    "\n",
    "![Distribution%20Of%20Ride%20Start%20Times.png](attachment:Distribution%20Of%20Ride%20Start%20Times.png)"
   ]
  },
  {
   "attachments": {
    "Distribution%20Of%20Ride%20Numbers.png": {
     "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlgAAAFzCAYAAADi5Xe0AABEhklEQVR4Xu3dC5QU1Z3HcQ+uuDEcPburm3WzG4KHBcMhomx2V/La3ezm4UZNYiIaE8NL1IgRxSgRI4ioISi+UFQUFFEQ5WEQBN+CvF8CMgoqDC8HcJhhmGdP93T/d/63vdXVd7p7emZqpmd6vp9z6kzXrVvdXTU9U7++devWcQIAAIBAHecWAAAAoGUIWAAAAAEjYAEAAASMgAUAABAwAhYAAEDACFgAAAABI2ABAAAEjIAFAAAQMAIWAABAwAhYAAAAASNgAQAABIyABQAAEDACFgAAQMAIWAAAAAEjYAEAAASMgAUAABAwAhYAAEDACFgAAAABI2ABAAAEjIAFAAAQMAIWAABAwAhYAAAAAWuVgHXTTTclTTfffLOMGTNG/vznP8tf/vIXqaiocFfx6jZVLBaTzZs3u8UZua/lzgch3ftqjddqjpKSEvO7uOeee+TWW2+V2267Te6//35ZtmyZlJWVudU9umzmzJkyduxY+eMf/yjz5893qyRxPwt20td76KGH5L333nNXadI+akrdbNnnXLt2rbvI0xqvm41cvS4AoGnaJGC50/jx4+XIkSMp12mqyZMnN3k997Xc+SCke1+t8VpNtXr1avnDH/7Q4PdiJw3DmzZtclczHnvssaS6CxcudKskcZ871fThhx+mXCcbTambLfuct99+u1RXV7uLjdZ43Wzk6nUBAE3TqgHL0tacUCgkhYWF8uCDD5pl2lqi5S3lvlZzBPEcrtZ4ziCsW7fOe2/PP/+87NmzR2pra6WmpkZ2794tzz77rLc8VQvcLbfcYpZ99NFHUldXJ5FIxK2SJN1+0JawWbNmmWUa2por3fO3hH1OndIFyNZ43Wzk6nUBAE3TJgHLT1sE7rzzTrO8oKDAXdxkmV4rW0E8h6s1nrOl9NSstk7pKdtU4clauXKlee96GtA9nWu3K9twnGk/6HPrMj3V2FyZnr+57HNOmjRJRo8eLUVFRW6VVnndbOTqdQEATdPmAUvZA/jcuXO9slTrrFmzxrR46QFY+wlNmTJFNmzY4C236/gnd9nRo0flgQceMMHi6aefTlrm1tWWnNmzZ5vXuuOOO+Sll15qcIrIXTdVufueUr2WXzgclqVLl8rdd99tTt396U9/Mn2h3NYhu+5nn30mTz75pNkmPY318ssvm9akxrz++utm/Tlz5riLGpg+fbqpu2LFCjPvbk+q7UglUz0bsMaNG5dUnmod/d0sWrTIhHP9POg2aFmqurovdFsnTpxo9qfuV92/7v5Mxz7njh07zM9HH33UrdLgdd35dOV2PhqNmu3RbddT5m+++aZZri2Jum3aR023VX+3/vdt18/ms6qy3Rf2eVP9vajG/hYBAMlyErAOHz5slmsHa8tdx4awVFOmg75l56dNm2Z+aqvNggULkpa5dWfMmNHg+fSg4g8v7rqpyt3nSPValj63HsDd+jo9/vjj5kDsrjthwoQGdV977TWvXjpTp041dfX0XmO0dVHr6jrKfT07NSZVPW390lOEzz33nFn2xBNPJC1319F98PDDDzd4bf/vy9LntuHQnfSzkE3Lm/85n3rqKfN4y5Ytaeukmk9Xbuf1s+i+P21VfOSRRxqUv/rqqw3Wz+az2pR94S/Xn/6/l2z+FgEAyXISsLTFRpfrKSjLXUe/leu8HnS0vn5j187ZWqbfwtOt55ZrZ/Pi4uKUy9x5bTXYunWraUX44IMPTOuCluu3d7euyy1359OV223S19LX1NfWcJPptXWbDhw4IJWVleZKQC3TForGaGuX1tX1GnPs2DFTV1tR/Nz33xhbP92kfbq0H1iqdSy9mk/ntaVn586dZh+9//775vPj1t24caOZ17Cxb98+89nRfaUtLlqufdAa439OvRhD36PuB32uVHVSzacrt/N6Re3+/ftN30RtpdIybRnSLx1arp93G8K0rrt+Np/VpuwL+7yp/l6y/VsEACTkJGBpi4Qu1/4tlruOHmzcg0Aq7npuuR58XO46dv7dd9/11Uoc2P2niNx105W78+nKbauSOySAHii1XFs0LLvuJ5984pXZIKSnfxpjrxz0t4qloy0hWlfDhZ/7/htj67uTvhc9zbl37153lQavoS15Or9+/XpfreQO+5atq6dR/TQoaXmq030u9zn1lJrO62nbdHXc+XTldt7/uSwvL/fK/a2LVVVVpsz/u7X1svmsNmVfpHpfVrZ/iwCAhJwELP3Wrcv1W7jlrvPiiy96ZXog1ivc9Jt9ur4jLlueqrXGXcfOa/8TP53X8kwtbenK3fl05bYVxh17yr52qn2krR6WDaupXstlW7B0/zfGHtyDasGy9Hm187getLUFJhV3Hfu+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/vz55rEaMmSIzJw506sDAACQS20asMaNGyfjx493ixvQ1qvi4mLzeM+ePdKnTx9vmb/VSx8fPHhQevToIeFw2CsHAADIpTYNWOeff76ce+65csopp8i3vvUt2bt3r1vF6Natm0QiEfM4FArJSSed5C3TVis9TaitWPp4zJgxprULAACgvWjTgHX66afLsmXLTHhas2aNXHDBBW4V4/jjj/cex2Ix6dKlizdvTw3qNGvWLOnevbvMmDGjQb+sVLQP2MaNG5mYmJiYmJiYGkyaE4LSpgHLLxqNysknn+wWG6eeeqp3yk9bsLRFK5UpU6bIyJEjU/bLAgAAyJWcBSxtxTrttNPcYqNv375y4MAB83jfvn1y5plnOjXiAa1Xr15SWFjYoF8WAABALrVpGtFApKcGNVytXLlShg8f7lYxRowYIRMmTJDKykoZO3asDB482K0i8+bN864udPtlAQAA5FKbBiwNV2eddZaceOKJct5550lpaam3zN/ytGHDBunZs6cJS3pFoY6L5RowYIA3Ppa/X5YGLQAAgFxq04AFAADQGRCwAAAAAkbAAgAACBgBCwAAIGAELAAAgIARsAAAAAJGwAIAAAgYAQsAACBgBCwAAICAEbAAAAACRsACAAAIGAELAAAgYAQsAACAgBGwAAAAAkbAAgAACBgBCwAAIGAELAAAgIARsAAAAAJGwAIAAAgYAQsAACBgBCwAAICAEbAAAAACRsACAAAIGAELAAAgYAQsAACAgBGwAAAAAkbAAgAACBgBCwAAIGAELAAAgIARsAAAAAJGwAIAAAgYAQsAACBgBCwAAICAEbAAAAACRsACAAAIGAELAAAgYAQsAACAgBGwAAAAAkbAAgAACFibBqzt27dL7969pWvXrtK/f39Zv369W8XIVG/BggVywgknmGnhwoWmrKCgQPr16+fVAQAAyKU2DViDBg2SiRMnSllZmYwePVoGDhzoVjEy1bPBav78+eaxGjJkiMycOdOrAwAAkEttGrC0Vaq4uNg83rNnj/Tp08epEZep3nHHJd6yPj548KD06NFDwuGwVw4AAJBLbRqwunXrJpFIxDwOhUJy0kknOTXiMtXTVis9TaitWPp4zJgxprULAACgvWjTgHX88cd7j2OxmHTp0sW3NCFTPXtqUKdZs2ZJ9+7dZcaMGQ36ZQEAAORKmwasU0891TuV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"
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Casual riders are weekend riders; member riders are weekday riders.\n",
    "\n",
    "![Distribution%20Of%20Ride%20Numbers.png](attachment:Distribution%20Of%20Ride%20Numbers.png)"
   ]
  },
  {
   "attachments": {
    "Screen%20Shot%202022-10-18%20at%2012.01.02%20PM.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Weekend rides tend to last longer than weekday rides. There is little to no variation across weekdays for member riders, unlike casual riders, whose weekday averages vary by as much as 5 minutes.\n",
    "\n",
    "![Screen%20Shot%202022-10-18%20at%2012.01.02%20PM.png](attachment:Screen%20Shot%202022-10-18%20at%2012.01.02%20PM.png)"
   ]
  },
  {
   "attachments": {
    "Distribution%20Of%20Ride%20Types.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Member riders favour classic bikes over electric ones; casual riders, the other way around.\n",
    "\n",
    "![Distribution%20Of%20Ride%20Types.png](attachment:Distribution%20Of%20Ride%20Types.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Taken altogether, these findings suggest that **the main difference between casual riders and member riders is that the latter are significantly more likely to employ Cyclistic's service for daily commuting and exercising purposes than the former, whose trips probably are leisurely and sporadic for the most part**. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 6: Act ###"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Guiding questions:\n",
    "\n",
    "● What is your final conclusion based on your analysis?\n",
    "\n",
    "● How could your team and business apply your insights?\n",
    "\n",
    "● What next steps would you or your stakeholders take based on your findings?\n",
    "\n",
    "● Is there additional data you could use to expand on your findings?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conclusion**\n",
    "\n",
    "Based on the key takeaway above, Cyclistic should primarily work on persuading casual riders to use the company's bikes for regular purposes, for that is evidently the reason member riders have signed up for the annual plan."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Next Questions**\n",
    "\n",
    "To do so, the company ought to understand why one would choose Cyclistic bikes over other means for everyday transportation and, if any barriers exist, remove them to facilitate the conversion process and maintain the membership experience as pleasant as possible.\n",
    "\n",
    "There are a number of possible reasons that keep casual riders unmotivated for now:\n",
    "- They aren't fully aware or inspired by the health and environmental benefits of daily cycling as opposed to driving or taking mass transportation\n",
    "\n",
    "- They already have their own bikes and use Cyclistic only when they left theirs at home\n",
    "\n",
    "- There aren't stations nearby all of the places they frequently visit, rendering the Cyclistic experience inconvinient for daily commuting\n",
    "\n",
    "- There's a lack of supply for classic bikes (or electric bikes for that matter), or even worse, frequent lack of bikes\n",
    "\n",
    "- They find the annual plan not so appealing financially (although this probably doesn't matter much)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Recommended Actions**\n",
    "\n",
    "Therefore this data analyst recommends that the team take the following set of actions to fulfill the ultimate goal:\n",
    "\n",
    "- Analyse geospatial data to see if there are enough stations clustered well over the intended area of service so that ideally anyone would easily find a Cyclistic station nearby at any place.\n",
    "\n",
    "- As a follow-up analysis to above, see if there's adequate supply of all types of bikes for the most frequently visited stations\n",
    "\n",
    "- Survey a random sample of casual riders to ask them what would make them choose Cyclistic over others for everyday transportation\n",
    "\n",
    "- Consider carrying out an online/in-person campaign promoting various benefits of daily cycling, with the message that Cyclistic is the go-to company for that\n",
    "\n",
    "- For effective efforts, if possible, incorporate demographic data as well to see which causal group segment to target"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
